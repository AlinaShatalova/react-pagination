{"version":3,"sources":["components/Pokemons.js","components/Pagination.js","components/Buttons.js","components/SearchField.js","components/PokemonsList.js","App.js","reportWebVitals.js","index.js"],"names":["Pokemons","pokemonData","userPokemon","loading","currentPage","pokemonsPerPage","useState","sortDirection","setSortDirection","className","style","maxWidth","sortedPokemons","filter","pokemon","name","startsWith","sort","a","b","lastPokemonIndex","firstPokemonIndex","currentPokemon","slice","length","scope","width","onClick","cursor","map","i","src","sprites","front_default","alt","role","Pagination","totalPokemons","paginate","pagesNumbers","Math","ceil","push","number","href","e","preventDefault","Buttons","nextPage","prevPage","SearchFiled","props","value","changeText","htmlFor","type","onChange","placeholder","id","PokemonsList","location","useLocation","navigate","useNavigate","path","window","pathname","initialQueryString","queryString","parse","search","initialPageNumber","Number","page","setPokemonData","setUserPokemon","setLoading","setCurrentPage","useEffect","getPokemons","axios","get","res","loadingPokemon","data","results","Promise","all","url","pokemonRecord","_pokemonData","target","pageNumber","curr","App","exact","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bc09852.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Pokemons = ({ pokemonData, userPokemon, loading, currentPage, pokemonsPerPage }) => {\n    const [sortDirection, setSortDirection] = useState(null);\n\n    if(loading) {\n        return (\n            <h2 className=\"alert alert-secondary mt-4 mb-4\" style={{ maxWidth: \"50%\"}}>Loading...</h2>\n        )\n    }\n\n    // Копируем массив покемонов в новую переменную с учетом пользовательского ввода\n    let sortedPokemons = [];\n\n    if (userPokemon) {\n        sortedPokemons = pokemonData.filter((pokemon) => pokemon.name.startsWith(userPokemon));\n    } else {\n        sortedPokemons = [...pokemonData];\n    }\n    \n    // функция сортировки\n    if (sortDirection !== null) {\n        sortedPokemons.sort((a, b) => {\n            if (a.name < b.name) {\n                return sortDirection === 'ascending' ?  -1 : 1;\n            }\n            if (a.name > b.name) {\n                return sortDirection === 'ascending' ?  1 : -1;\n            }\n            return 0;\n        }\n    )};\n\n    // по клику\n    const requestDirection = () => {\n        const direction = sortDirection === 'ascending' ? 'descending' : 'ascending';\n        setSortDirection(direction);\n    }\n\n\n    // Получение покемонов для данной страницы\n    const lastPokemonIndex = currentPage * pokemonsPerPage;\n    const firstPokemonIndex = lastPokemonIndex - pokemonsPerPage;\n    const currentPokemon = sortedPokemons.slice(firstPokemonIndex, lastPokemonIndex);\n\n    return (\n        <>\n            {currentPokemon.length > 0 ?\n                <>\n                    <p className=\"mt-4 fs-6\">\n                        To sort the table data in ascending order, click on the field \"Name\".\n                        To sort the table data in descending order, click on the field again\n                    </p>\n                    <table className=\"table table-bordered table-striped\">\n                        <thead className=\"thead-dark\">\n                            <tr>\n                                <th scope=\"col\" width=\"7%\">Icon</th>\n                                <th scope=\"col\" onClick={() => requestDirection()} style={{cursor: 'pointer'}}>Name</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {currentPokemon.map((pokemon, i) => (\n                                <tr key={i}>\n                                    <td className=\"text-center\">\n                                        <img src={pokemon.sprites.front_default} alt={pokemon.name} className=\"ml-2\" style={{width: 75}} />\n                                    </td>\n                                    <td className=\"align-middle\">\n                                        {pokemon.name}\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                        </table> \n                </> :\n                <div className=\"alert alert-primary mt-4 mb-4\" role=\"alert\" style={{ maxWidth: \"50%\"}}>\n                    There are no pokemons with this name\n                </div>\n            }\n        </>  \n    )\n};\nexport default Pokemons;","import React from 'react'\n\nconst Pagination = ({ pokemonsPerPage, totalPokemons, paginate }) => {\n    const pagesNumbers = [];\n\n    for (let i = 1; i <= Math.ceil((totalPokemons / pokemonsPerPage)); i += 1) {\n        pagesNumbers.push(i);\n    }\n\n    return (\n        <ul className=\"pagination\">\n            {pagesNumbers.map(number => (\n                <li className=\"page-item\" key={number}>\n                    <a className=\"page-link\" href=\"!#\" onClick={(e) => {paginate(number); e.preventDefault();}} >{number}</a>\n                </li>\n            ))}\n        </ul>\n    )\n};\nexport default Pagination;","import React from 'react'\n\nconst Buttons = ({ nextPage, prevPage }) => {\n    return (\n        <div className=\"mb-5\">\n            <button className=\"btn btn-primary\" onClick={prevPage} >Prev page</button>\n            <button className=\"btn btn-primary ms-2\" onClick={nextPage} >Next page</button>\n        </div>\n    )\n};\nexport default Buttons;","import React from 'react'\n\nconst SearchFiled = (props) => {\n\n    const {value, changeText} = props;\n\n    return (\n        <>\n            <label htmlFor=\"ex2\" className=\"mt-2 fs-5\">Search your pokemon:</label>    \n            <input \n                type=\"text\"\n                value={value}\n                onChange={changeText}\n                placeholder=\"Pokemon's name\"\n                id=\"ex2\"\n                className=\"form-control col-xs-3 mt-1\"\n                style={{ maxWidth: \"50%\"}}\n            />\n        </>\n    )\n};\nexport default SearchFiled;","import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport Pokemons from './Pokemons'\nimport Pagination from './Pagination'\nimport Buttons from './Buttons'\nimport SearchFiled from './SearchField'\nimport queryString from \"query-string\"\nimport { useNavigate, useLocation } from \"react-router-dom\"\n\nfunction PokemonsList() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const path = window.location.pathname;\n  const initialQueryString = queryString.parse(location.search);\n  const initialPageNumber = Number(initialQueryString.page) || 1;\n  const [pokemonData, setPokemonData] = useState([]);\n  const [userPokemon, setUserPokemon] = useState('');\n  const [loading, setLoading] = useState(false); \n  const [currentPage, setCurrentPage] = useState(initialPageNumber);\n  const [pokemonsPerPage] = useState(50);\n\n  useEffect(() => {\n    const getPokemons = async () => {\n      setLoading(true);\n      const res = await axios.get('https://pokeapi.co/api/v2/pokemon/?limit=400');\n      await loadingPokemon(res.data.results);\n      setLoading(false);\n    }\n\n    getPokemons();\n    navigate(`${path}?page=${currentPage}`);\n  }, [currentPage, navigate, path])\n\n  const loadingPokemon = async data => {\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await axios.get(pokemon.url);\n      return pokemonRecord.data;\n    }))\n\n    setPokemonData(_pokemonData);\n  }\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  const nextPage = () => setCurrentPage((curr) => {\n    if(curr === pokemonData.length / pokemonsPerPage) {\n      return 1;\n    } else {\n      return curr + 1;\n    }\n  });\n  const prevPage = () => setCurrentPage((curr) => {\n    if (curr === 1) {\n      return pokemonData.length / pokemonsPerPage;\n    } else {\n      return curr - 1;\n    }\n  });\n\n  const handleChangePokemon = (e) => {\n    setUserPokemon(e.target.value);\n  }\n\n  return (\n    <div className=\"container mt-5 shadow p-5 mb-5 bg-white rounded\">\n      <h1 className=\"text-primary fs-1\">Pokemons</h1>\n      <SearchFiled changeText={handleChangePokemon} value={userPokemon} />\n      <Pokemons\n        pokemonData={pokemonData}\n        userPokemon={userPokemon}\n        loading={loading} \n        currentPage={currentPage}\n        pokemonsPerPage={pokemonsPerPage}\n        />\n      <Pagination pokemonsPerPage={pokemonsPerPage} totalPokemons={pokemonData.length} paginate={paginate} />\n      <Buttons nextPage={nextPage} prevPage={prevPage} />\n    </div>\n  );\n}\n\nexport default PokemonsList;\n","import \"./App.css\";\nimport React from 'react'\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport PokemonsList from \"./components/PokemonsList\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route exact path=\"/react-pagination?\" element={<PokemonsList />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","  import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}